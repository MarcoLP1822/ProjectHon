{"ast":null,"code":"var _jsxFileName = \"/Users/marcolp/AI/CURSOR projects/Lose/frontend/src/components/book/CoverSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Grid, Card, CardMedia, CardContent, Typography, CardActions, Button, Alert, Box } from '@mui/material';\nimport { useBooks } from '../../context/BookContext';\nimport GenerativeSection from '../common/GenerativeSection';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CoverSection = () => {\n  _s();\n  const {\n    generateScenes,\n    generateCoverImages,\n    updateBookMetadata\n  } = useBooks();\n  const [error, setError] = useState(null);\n  const handleGenerate = async bookId => {\n    try {\n      setError(null);\n\n      // Prima generiamo le scene\n      const scenesResponse = await generateScenes(bookId);\n\n      // Poi generiamo le copertine basate sulle scene\n      const coversResponse = await generateCoverImages(bookId, scenesResponse.scenes);\n\n      // Aggiorniamo i metadata del libro\n      await updateBookMetadata(bookId, {\n        covers: {\n          scenes: coversResponse.covers\n        }\n      });\n    } catch (err) {\n      // Gestiamo specificamente l'errore di content policy\n      if (err.code === 'CONTENT_POLICY_VIOLATION') {\n        setError(err.message);\n      } else {\n        setError('Si è verificato un errore durante la generazione delle copertine. Riprova più tardi.');\n      }\n    }\n  };\n  const renderContent = book => {\n    var _book$metadata, _book$metadata$covers;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), (book === null || book === void 0 ? void 0 : (_book$metadata = book.metadata) === null || _book$metadata === void 0 ? void 0 : (_book$metadata$covers = _book$metadata.covers) === null || _book$metadata$covers === void 0 ? void 0 : _book$metadata$covers.scenes) && /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: book.metadata.covers.scenes.map((scene, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              display: 'flex',\n              height: '300px' // Altezza fissa per la card\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n              component: \"img\",\n              sx: {\n                width: '300px',\n                // Larghezza fissa per l'immagine\n                objectFit: 'contain',\n                bgcolor: 'grey.100' // Sfondo leggero per le immagini\n              },\n              image: scene.imageUrl,\n              alt: `Cover ${index + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexDirection: 'column',\n                flexGrow: 1,\n                p: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(CardContent, {\n                sx: {\n                  flex: '1 0 auto'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  gutterBottom: true,\n                  children: scene.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  children: scene.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"small\",\n                  color: \"primary\",\n                  children: \"Seleziona\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  };\n  const sectionProps = {\n    title: \"Copertine\",\n    emptyMessage: \"Nessuna copertina generata. Clicca il pulsante per generarne.\",\n    generateButtonText: \"Genera Copertine\",\n    onGenerate: handleGenerate,\n    renderContent: renderContent\n  };\n  return /*#__PURE__*/_jsxDEV(GenerativeSection, {\n    ...sectionProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 10\n  }, this);\n};\n_s(CoverSection, \"DtRH5tuacq8xvm/ARe1W2+sKuz4=\", false, function () {\n  return [useBooks];\n});\n_c = CoverSection;\nexport default CoverSection;\nvar _c;\n$RefreshReg$(_c, \"CoverSection\");","map":{"version":3,"names":["React","useState","Grid","Card","CardMedia","CardContent","Typography","CardActions","Button","Alert","Box","useBooks","GenerativeSection","jsxDEV","_jsxDEV","Fragment","_Fragment","CoverSection","_s","generateScenes","generateCoverImages","updateBookMetadata","error","setError","handleGenerate","bookId","scenesResponse","coversResponse","scenes","covers","err","code","message","renderContent","book","_book$metadata","_book$metadata$covers","children","severity","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","metadata","container","spacing","map","scene","index","item","xs","display","height","component","width","objectFit","bgcolor","image","imageUrl","alt","flexDirection","flexGrow","p","flex","variant","gutterBottom","title","color","description","size","sectionProps","emptyMessage","generateButtonText","onGenerate","_c","$RefreshReg$"],"sources":["/Users/marcolp/AI/CURSOR projects/Lose/frontend/src/components/book/CoverSection.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { \n  Grid, \n  Card, \n  CardMedia, \n  CardContent, \n  Typography, \n  CardActions, \n  Button,\n  Alert,\n  Box\n} from '@mui/material';\nimport { useBooks } from '../../context/BookContext';\nimport GenerativeSection from '../common/GenerativeSection';\n\nconst CoverSection = () => {\n  const { generateScenes, generateCoverImages, updateBookMetadata } = useBooks();\n  const [error, setError] = useState(null);\n\n  const handleGenerate = async (bookId) => {\n    try {\n      setError(null);\n      \n      // Prima generiamo le scene\n      const scenesResponse = await generateScenes(bookId);\n      \n      // Poi generiamo le copertine basate sulle scene\n      const coversResponse = await generateCoverImages(bookId, scenesResponse.scenes);\n      \n      // Aggiorniamo i metadata del libro\n      await updateBookMetadata(bookId, {\n        covers: {\n          scenes: coversResponse.covers\n        }\n      });\n    } catch (err) {\n      // Gestiamo specificamente l'errore di content policy\n      if (err.code === 'CONTENT_POLICY_VIOLATION') {\n        setError(err.message);\n      } else {\n        setError('Si è verificato un errore durante la generazione delle copertine. Riprova più tardi.');\n      }\n    }\n  };\n\n  const renderContent = (book) => {\n    return (\n      <>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n        \n        {book?.metadata?.covers?.scenes && (\n          <Grid container spacing={3}>\n            {book.metadata.covers.scenes.map((scene, index) => (\n              <Grid item xs={12} key={index}>\n                <Card sx={{ \n                  display: 'flex',\n                  height: '300px'  // Altezza fissa per la card\n                }}>\n                  <CardMedia\n                    component=\"img\"\n                    sx={{ \n                      width: '300px',  // Larghezza fissa per l'immagine\n                      objectFit: 'contain',\n                      bgcolor: 'grey.100'  // Sfondo leggero per le immagini\n                    }}\n                    image={scene.imageUrl}\n                    alt={`Cover ${index + 1}`}\n                  />\n                  <Box sx={{ \n                    display: 'flex',\n                    flexDirection: 'column',\n                    flexGrow: 1,\n                    p: 2\n                  }}>\n                    <CardContent sx={{ flex: '1 0 auto' }}>\n                      <Typography variant=\"h6\" gutterBottom>\n                        {scene.title}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {scene.description}\n                      </Typography>\n                    </CardContent>\n                    <CardActions>\n                      <Button size=\"small\" color=\"primary\">\n                        Seleziona\n                      </Button>\n                    </CardActions>\n                  </Box>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        )}\n      </>\n    );\n  };\n\n  const sectionProps = {\n    title: \"Copertine\",\n    emptyMessage: \"Nessuna copertina generata. Clicca il pulsante per generarne.\",\n    generateButtonText: \"Genera Copertine\",\n    onGenerate: handleGenerate,\n    renderContent: renderContent\n  };\n\n  return <GenerativeSection {...sectionProps} />;\n};\n\nexport default CoverSection; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}