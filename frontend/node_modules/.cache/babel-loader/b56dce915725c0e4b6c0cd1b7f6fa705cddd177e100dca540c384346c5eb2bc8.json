{"ast":null,"code":"var _jsxFileName = \"/Users/marcolp/AI/CURSOR projects/Lose/frontend/src/components/book/CoverSection.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Grid, Card, CardMedia, CardContent, Typography, CardActions, Button } from '@mui/material';\nimport { useBooks } from '../../context/BookContext';\nimport GenerativeSection from '../common/GenerativeSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoverSection = () => {\n  _s();\n  const {\n    generateScenes,\n    generateCoverImages,\n    updateBookMetadata\n  } = useBooks();\n  const handleGenerate = async bookId => {\n    // Prima generiamo le scene\n    const scenesResponse = await generateScenes(bookId);\n\n    // Poi generiamo le copertine basate sulle scene\n    const coversResponse = await generateCoverImages(bookId, scenesResponse.scenes);\n\n    // Aggiorniamo i metadata del libro\n    await updateBookMetadata(bookId, {\n      covers: {\n        scenes: coversResponse.covers\n      }\n    });\n  };\n  const renderContent = book => {\n    var _book$metadata, _book$metadata$covers;\n    if (!(book !== null && book !== void 0 && (_book$metadata = book.metadata) !== null && _book$metadata !== void 0 && (_book$metadata$covers = _book$metadata.covers) !== null && _book$metadata$covers !== void 0 && _book$metadata$covers.scenes)) return null;\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: book.metadata.covers.scenes.map((scene, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            height: \"300\",\n            image: scene.imageUrl,\n            alt: `Cover ${index + 1}`,\n            sx: {\n              objectFit: 'contain'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              gutterBottom: true,\n              children: scene.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: scene.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              color: \"primary\",\n              children: \"Seleziona\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(GenerativeSection, {\n    title: \"Copertine\",\n    emptyMessage: \"Nessuna copertina generata. Clicca il pulsante per generarne.\",\n    generateButtonText: \"Genera Copertine\",\n    onGenerate: handleGenerate,\n    renderContent: renderContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(CoverSection, \"IXQjjHSxL5hoe5WRJHJv+3SfHT8=\", false, function () {\n  return [useBooks];\n});\n_c = CoverSection;\nexport default CoverSection;\nvar _c;\n$RefreshReg$(_c, \"CoverSection\");","map":{"version":3,"names":["React","Grid","Card","CardMedia","CardContent","Typography","CardActions","Button","useBooks","GenerativeSection","jsxDEV","_jsxDEV","CoverSection","_s","generateScenes","generateCoverImages","updateBookMetadata","handleGenerate","bookId","scenesResponse","coversResponse","scenes","covers","renderContent","book","_book$metadata","_book$metadata$covers","metadata","container","spacing","children","map","scene","index","item","xs","sm","md","component","height","image","imageUrl","alt","sx","objectFit","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","title","color","description","size","emptyMessage","generateButtonText","onGenerate","_c","$RefreshReg$"],"sources":["/Users/marcolp/AI/CURSOR projects/Lose/frontend/src/components/book/CoverSection.js"],"sourcesContent":["import React from 'react';\nimport { Grid, Card, CardMedia, CardContent, Typography, CardActions, Button } from '@mui/material';\nimport { useBooks } from '../../context/BookContext';\nimport GenerativeSection from '../common/GenerativeSection';\n\nconst CoverSection = () => {\n  const { generateScenes, generateCoverImages, updateBookMetadata } = useBooks();\n\n  const handleGenerate = async (bookId) => {\n    // Prima generiamo le scene\n    const scenesResponse = await generateScenes(bookId);\n    \n    // Poi generiamo le copertine basate sulle scene\n    const coversResponse = await generateCoverImages(bookId, scenesResponse.scenes);\n    \n    // Aggiorniamo i metadata del libro\n    await updateBookMetadata(bookId, {\n      covers: {\n        scenes: coversResponse.covers\n      }\n    });\n  };\n\n  const renderContent = (book) => {\n    if (!book?.metadata?.covers?.scenes) return null;\n\n    return (\n      <Grid container spacing={3}>\n        {book.metadata.covers.scenes.map((scene, index) => (\n          <Grid item xs={12} sm={6} md={4} key={index}>\n            <Card>\n              <CardMedia\n                component=\"img\"\n                height=\"300\"\n                image={scene.imageUrl}\n                alt={`Cover ${index + 1}`}\n                sx={{ objectFit: 'contain' }}\n              />\n              <CardContent>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  {scene.title}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {scene.description}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button size=\"small\" color=\"primary\">\n                  Seleziona\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    );\n  };\n\n  return (\n    <GenerativeSection\n      title=\"Copertine\"\n      emptyMessage=\"Nessuna copertina generata. Clicca il pulsante per generarne.\"\n      generateButtonText=\"Genera Copertine\"\n      onGenerate={handleGenerate}\n      renderContent={renderContent}\n    />\n  );\n};\n\nexport default CoverSection; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}