{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5002/api'\n});\nexport const bookService = {\n  uploadBook: async file => {\n    const formData = new FormData();\n    formData.append('book', file);\n    const response = await api.post('/books/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  getBooks: async () => {\n    const response = await api.get('/books');\n    return response.data;\n  },\n  deleteBook: async id => {\n    const response = await api.delete(`/books/${id}`);\n    return response.data;\n  },\n  updateBook: async (id, data) => {\n    const response = await api.put(`/books/${id}`, data);\n    return response.data;\n  },\n  generateCategories: async bookId => {\n    console.log('API: Sending request for book ID:', bookId);\n    const response = await api.post(`/ai/categories/${bookId}`);\n    return response.data;\n  },\n  generateKeywords: async bookId => {\n    const response = await api.post(`/ai/keywords/${bookId}`);\n    return response.data;\n  },\n  regenerateCategory: async (bookId, type) => {\n    const response = await api.post(`/ai/categories/${bookId}/${type}`);\n    return response.data;\n  },\n  regenerateKeyword: async (bookId, index, currentKeywords) => {\n    try {\n      const formattedKeywords = {\n        keywords: Array.isArray(currentKeywords.keywords) ? currentKeywords.keywords : []\n      };\n      const response = await api.post(`/ai/keywords/${bookId}/regenerate`, {\n        index: parseInt(index, 10),\n        currentKeywords: formattedKeywords\n      });\n      console.log('API Response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('API Error - regenerateKeyword:', error);\n      throw error;\n    }\n  },\n  getStorageStatus: async () => {\n    const response = await api.get('/books/storage-status');\n    return response.data;\n  },\n  cleanupStorage: async (force = false) => {\n    const response = await api.post(`/books/cleanup?force=${force}`);\n    return response.data;\n  },\n  generateScenes: async bookId => {\n    const response = await api.post(`/ai/scenes/${bookId}`);\n    return response.data;\n  },\n  generateCoverImages: async (bookId, scenes) => {\n    console.log('API: Sending scenes data:', JSON.stringify(scenes, null, 2));\n    if (!Array.isArray(scenes)) {\n      throw new Error('Scenes must be an array');\n    }\n    if (scenes.length === 0) {\n      throw new Error('Scenes array is empty');\n    }\n    scenes.forEach((scene, index) => {\n      if (!scene.title || !scene.description) {\n        throw new Error(`Scene at index ${index} is missing required fields`);\n      }\n    });\n    const response = await api.post(`/ai/covers/${bookId}`, {\n      scenes\n    });\n    return response.data;\n  },\n  resetBookData: async bookId => {\n    const response = await api.post(`/books/${bookId}/reset`);\n    return response.data;\n  },\n  generateBackCover: async bookId => {\n    const response = await api.post(`/ai/backcover/${bookId}`);\n    return response.data;\n  },\n  generatePreface: async bookId => {\n    const response = await api.post(`/ai/preface/${bookId}`);\n    return response.data;\n  },\n  generateStoreDescription: async bookId => {\n    const response = await api.post(`/ai/store-description/${bookId}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","bookService","uploadBook","file","formData","FormData","append","response","post","headers","data","getBooks","get","deleteBook","id","delete","updateBook","put","generateCategories","bookId","console","log","generateKeywords","regenerateCategory","type","regenerateKeyword","index","currentKeywords","formattedKeywords","keywords","Array","isArray","parseInt","error","getStorageStatus","cleanupStorage","force","generateScenes","generateCoverImages","scenes","JSON","stringify","Error","length","forEach","scene","title","description","resetBookData","generateBackCover","generatePreface","generateStoreDescription"],"sources":["/Users/marcolp/AI/CURSOR projects/Lose/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5002/api'\n});\n\nexport const bookService = {\n  uploadBook: async (file) => {\n    const formData = new FormData();\n    formData.append('book', file);\n    const response = await api.post('/books/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n\n  getBooks: async () => {\n    const response = await api.get('/books');\n    return response.data;\n  },\n\n  deleteBook: async (id) => {\n    const response = await api.delete(`/books/${id}`);\n    return response.data;\n  },\n\n  updateBook: async (id, data) => {\n    const response = await api.put(`/books/${id}`, data);\n    return response.data;\n  },\n\n  generateCategories: async (bookId) => {\n    console.log('API: Sending request for book ID:', bookId);\n    const response = await api.post(`/ai/categories/${bookId}`);\n    return response.data;\n  },\n\n  generateKeywords: async (bookId) => {\n    const response = await api.post(`/ai/keywords/${bookId}`);\n    return response.data;\n  },\n\n  regenerateCategory: async (bookId, type) => {\n    const response = await api.post(`/ai/categories/${bookId}/${type}`);\n    return response.data;\n  },\n\n  regenerateKeyword: async (bookId, index, currentKeywords) => {\n    try {\n      const formattedKeywords = {\n        keywords: Array.isArray(currentKeywords.keywords) \n          ? currentKeywords.keywords \n          : []\n      };\n\n      const response = await api.post(`/ai/keywords/${bookId}/regenerate`, {\n        index: parseInt(index, 10),\n        currentKeywords: formattedKeywords\n      });\n      \n      console.log('API Response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('API Error - regenerateKeyword:', error);\n      throw error;\n    }\n  },\n\n  getStorageStatus: async () => {\n    const response = await api.get('/books/storage-status');\n    return response.data;\n  },\n\n  cleanupStorage: async (force = false) => {\n    const response = await api.post(`/books/cleanup?force=${force}`);\n    return response.data;\n  },\n\n  generateScenes: async (bookId) => {\n    const response = await api.post(`/ai/scenes/${bookId}`);\n    return response.data;\n  },\n\n  generateCoverImages: async (bookId, scenes) => {\n    console.log('API: Sending scenes data:', JSON.stringify(scenes, null, 2));\n    \n    if (!Array.isArray(scenes)) {\n      throw new Error('Scenes must be an array');\n    }\n    \n    if (scenes.length === 0) {\n      throw new Error('Scenes array is empty');\n    }\n    \n    scenes.forEach((scene, index) => {\n      if (!scene.title || !scene.description) {\n        throw new Error(`Scene at index ${index} is missing required fields`);\n      }\n    });\n    \n    const response = await api.post(`/ai/covers/${bookId}`, { scenes });\n    return response.data;\n  },\n\n  resetBookData: async (bookId) => {\n    const response = await api.post(`/books/${bookId}/reset`);\n    return response.data;\n  },\n\n  generateBackCover: async (bookId) => {\n    const response = await api.post(`/ai/backcover/${bookId}`);\n    return response.data;\n  },\n\n  generatePreface: async (bookId) => {\n    const response = await api.post(`/ai/preface/${bookId}`);\n    return response.data;\n  },\n\n  generateStoreDescription: async (bookId) => {\n    const response = await api.post(`/ai/store-description/${bookId}`);\n    return response.data;\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG;EACzBC,UAAU,EAAE,MAAOC,IAAI,IAAK;IAC1B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,MAAMI,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,eAAe,EAAEJ,QAAQ,EAAE;MACzDK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMJ,QAAQ,GAAG,MAAMT,GAAG,CAACc,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOL,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDG,UAAU,EAAE,MAAOC,EAAE,IAAK;IACxB,MAAMP,QAAQ,GAAG,MAAMT,GAAG,CAACiB,MAAM,CAAC,UAAUD,EAAE,EAAE,CAAC;IACjD,OAAOP,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDM,UAAU,EAAE,MAAAA,CAAOF,EAAE,EAAEJ,IAAI,KAAK;IAC9B,MAAMH,QAAQ,GAAG,MAAMT,GAAG,CAACmB,GAAG,CAAC,UAAUH,EAAE,EAAE,EAAEJ,IAAI,CAAC;IACpD,OAAOH,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDQ,kBAAkB,EAAE,MAAOC,MAAM,IAAK;IACpCC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,MAAM,CAAC;IACxD,MAAMZ,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,kBAAkBW,MAAM,EAAE,CAAC;IAC3D,OAAOZ,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDY,gBAAgB,EAAE,MAAOH,MAAM,IAAK;IAClC,MAAMZ,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,gBAAgBW,MAAM,EAAE,CAAC;IACzD,OAAOZ,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDa,kBAAkB,EAAE,MAAAA,CAAOJ,MAAM,EAAEK,IAAI,KAAK;IAC1C,MAAMjB,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,kBAAkBW,MAAM,IAAIK,IAAI,EAAE,CAAC;IACnE,OAAOjB,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDe,iBAAiB,EAAE,MAAAA,CAAON,MAAM,EAAEO,KAAK,EAAEC,eAAe,KAAK;IAC3D,IAAI;MACF,MAAMC,iBAAiB,GAAG;QACxBC,QAAQ,EAAEC,KAAK,CAACC,OAAO,CAACJ,eAAe,CAACE,QAAQ,CAAC,GAC7CF,eAAe,CAACE,QAAQ,GACxB;MACN,CAAC;MAED,MAAMtB,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,gBAAgBW,MAAM,aAAa,EAAE;QACnEO,KAAK,EAAEM,QAAQ,CAACN,KAAK,EAAE,EAAE,CAAC;QAC1BC,eAAe,EAAEC;MACnB,CAAC,CAAC;MAEFR,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEd,QAAQ,CAACG,IAAI,CAAC;MAC3C,OAAOH,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOuB,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,MAAM3B,QAAQ,GAAG,MAAMT,GAAG,CAACc,GAAG,CAAC,uBAAuB,CAAC;IACvD,OAAOL,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDyB,cAAc,EAAE,MAAAA,CAAOC,KAAK,GAAG,KAAK,KAAK;IACvC,MAAM7B,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,wBAAwB4B,KAAK,EAAE,CAAC;IAChE,OAAO7B,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED2B,cAAc,EAAE,MAAOlB,MAAM,IAAK;IAChC,MAAMZ,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,cAAcW,MAAM,EAAE,CAAC;IACvD,OAAOZ,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED4B,mBAAmB,EAAE,MAAAA,CAAOnB,MAAM,EAAEoB,MAAM,KAAK;IAC7CnB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEmB,IAAI,CAACC,SAAS,CAACF,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAEzE,IAAI,CAACT,KAAK,CAACC,OAAO,CAACQ,MAAM,CAAC,EAAE;MAC1B,MAAM,IAAIG,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEA,IAAIH,MAAM,CAACI,MAAM,KAAK,CAAC,EAAE;MACvB,MAAM,IAAID,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEAH,MAAM,CAACK,OAAO,CAAC,CAACC,KAAK,EAAEnB,KAAK,KAAK;MAC/B,IAAI,CAACmB,KAAK,CAACC,KAAK,IAAI,CAACD,KAAK,CAACE,WAAW,EAAE;QACtC,MAAM,IAAIL,KAAK,CAAC,kBAAkBhB,KAAK,6BAA6B,CAAC;MACvE;IACF,CAAC,CAAC;IAEF,MAAMnB,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,cAAcW,MAAM,EAAE,EAAE;MAAEoB;IAAO,CAAC,CAAC;IACnE,OAAOhC,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDsC,aAAa,EAAE,MAAO7B,MAAM,IAAK;IAC/B,MAAMZ,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,UAAUW,MAAM,QAAQ,CAAC;IACzD,OAAOZ,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDuC,iBAAiB,EAAE,MAAO9B,MAAM,IAAK;IACnC,MAAMZ,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,iBAAiBW,MAAM,EAAE,CAAC;IAC1D,OAAOZ,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDwC,eAAe,EAAE,MAAO/B,MAAM,IAAK;IACjC,MAAMZ,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,eAAeW,MAAM,EAAE,CAAC;IACxD,OAAOZ,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDyC,wBAAwB,EAAE,MAAOhC,MAAM,IAAK;IAC1C,MAAMZ,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,yBAAyBW,MAAM,EAAE,CAAC;IAClE,OAAOZ,QAAQ,CAACG,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}