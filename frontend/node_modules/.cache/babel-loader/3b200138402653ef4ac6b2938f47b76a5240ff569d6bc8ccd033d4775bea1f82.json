{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5002/api'\n});\nexport const bookService = {\n  uploadBook: async file => {\n    const formData = new FormData();\n    formData.append('book', file);\n    const response = await api.post('/books/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  getBooks: async () => {\n    const response = await api.get('/books');\n    return response.data;\n  },\n  deleteBook: async id => {\n    const response = await api.delete(`/books/${id}`);\n    return response.data;\n  },\n  updateBook: async (id, data) => {\n    const response = await api.put(`/books/${id}`, data);\n    return response.data;\n  },\n  resetBookData: async bookId => {\n    const response = await api.post(`/books/${bookId}/reset`);\n    return response.data;\n  },\n  getStorageStatus: async () => {\n    const response = await api.get('/books/storage-status');\n    return response.data;\n  },\n  cleanupStorage: async (force = false) => {\n    const response = await api.post(`/books/cleanup?force=${force}`);\n    return response.data;\n  },\n  generateCategories: async bookId => {\n    const response = await api.post(`/ai/categories/${bookId}`);\n    return response.data;\n  },\n  generateKeywords: async bookId => {\n    const response = await api.post(`/ai/keywords/${bookId}`);\n    return response.data;\n  },\n  generateScenes: async bookId => {\n    const response = await api.post(`/ai/scenes/${bookId}`);\n    return response.data;\n  },\n  generateCoverImages: async (bookId, scenes) => {\n    console.log('API: Sending scenes data:', JSON.stringify(scenes, null, 2));\n\n    // Validazione base\n    if (!Array.isArray(scenes)) {\n      throw new Error('Scenes must be an array');\n    }\n    if (scenes.length === 0) {\n      throw new Error('Scenes array is empty');\n    }\n\n    // Verifica che ogni scena abbia i campi necessari\n    scenes.forEach((scene, index) => {\n      if (!scene.title || !scene.description) {\n        throw new Error(`Scene at index ${index} is missing required fields`);\n      }\n    });\n    const response = await api.post(`/ai/covers/${bookId}`, {\n      scenes\n    });\n    return response.data;\n  },\n  generateBackCover: async bookId => {\n    const response = await api.post(`/ai/backcover/${bookId}`);\n    return response.data;\n  },\n  generatePreface: async bookId => {\n    const response = await api.post(`/ai/preface/${bookId}`);\n    return response.data;\n  },\n  generateStoreDescription: async bookId => {\n    const response = await api.post(`/ai/store-description/${bookId}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","bookService","uploadBook","file","formData","FormData","append","response","post","headers","data","getBooks","get","deleteBook","id","delete","updateBook","put","resetBookData","bookId","getStorageStatus","cleanupStorage","force","generateCategories","generateKeywords","generateScenes","generateCoverImages","scenes","console","log","JSON","stringify","Array","isArray","Error","length","forEach","scene","index","title","description","generateBackCover","generatePreface","generateStoreDescription"],"sources":["/Users/marcolp/AI/CURSOR projects/Lose/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5002/api'\n});\n\nexport const bookService = {\n  uploadBook: async (file) => {\n    const formData = new FormData();\n    formData.append('book', file);\n    const response = await api.post('/books/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n\n  getBooks: async () => {\n    const response = await api.get('/books');\n    return response.data;\n  },\n\n  deleteBook: async (id) => {\n    const response = await api.delete(`/books/${id}`);\n    return response.data;\n  },\n\n  updateBook: async (id, data) => {\n    const response = await api.put(`/books/${id}`, data);\n    return response.data;\n  },\n\n  resetBookData: async (bookId) => {\n    const response = await api.post(`/books/${bookId}/reset`);\n    return response.data;\n  },\n\n  getStorageStatus: async () => {\n    const response = await api.get('/books/storage-status');\n    return response.data;\n  },\n\n  cleanupStorage: async (force = false) => {\n    const response = await api.post(`/books/cleanup?force=${force}`);\n    return response.data;\n  },\n\n  generateCategories: async (bookId) => {\n    const response = await api.post(`/ai/categories/${bookId}`);\n    return response.data;\n  },\n\n  generateKeywords: async (bookId) => {\n    const response = await api.post(`/ai/keywords/${bookId}`);\n    return response.data;\n  },\n\n  generateScenes: async (bookId) => {\n    const response = await api.post(`/ai/scenes/${bookId}`);\n    return response.data;\n  },\n\n  generateCoverImages: async (bookId, scenes) => {\n    console.log('API: Sending scenes data:', JSON.stringify(scenes, null, 2));\n    \n    // Validazione base\n    if (!Array.isArray(scenes)) {\n      throw new Error('Scenes must be an array');\n    }\n    \n    if (scenes.length === 0) {\n      throw new Error('Scenes array is empty');\n    }\n    \n    // Verifica che ogni scena abbia i campi necessari\n    scenes.forEach((scene, index) => {\n      if (!scene.title || !scene.description) {\n        throw new Error(`Scene at index ${index} is missing required fields`);\n      }\n    });\n    \n    const response = await api.post(`/ai/covers/${bookId}`, { scenes });\n    return response.data;\n  },\n\n  generateBackCover: async (bookId) => {\n    const response = await api.post(`/ai/backcover/${bookId}`);\n    return response.data;\n  },\n\n  generatePreface: async (bookId) => {\n    const response = await api.post(`/ai/preface/${bookId}`);\n    return response.data;\n  },\n\n  generateStoreDescription: async (bookId) => {\n    const response = await api.post(`/ai/store-description/${bookId}`);\n    return response.data;\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}