{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5002/api'\n});\nexport const bookService = {\n  uploadBook: async file => {\n    const formData = new FormData();\n    formData.append('book', file);\n    const response = await api.post('/books/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  getBooks: async () => {\n    const response = await api.get('/books');\n    return response.data;\n  },\n  deleteBook: async id => {\n    const response = await api.delete(`/books/${id}`);\n    return response.data;\n  },\n  updateBook: async (id, data) => {\n    const response = await api.put(`/books/${id}`, data);\n    return response.data;\n  },\n  generateCategories: async bookId => {\n    const response = await api.post(`/ai/categories/${bookId}`);\n    return response.data;\n  },\n  generateKeywords: async bookId => {\n    const response = await api.post(`/ai/keywords/${bookId}`);\n    return response.data;\n  },\n  regenerateCategory: async (bookId, type, currentCategories) => {\n    const response = await api.post(`/ai/categories/${bookId}/${type}`, {\n      currentCategories\n    });\n    return response.data;\n  },\n  regenerateKeyword: async (bookId, index, currentKeywords) => {\n    const response = await api.post(`/ai/keywords/${bookId}/${index}`, {\n      currentKeywords\n    });\n    return response.data;\n  },\n  getStorageStatus: async () => {\n    const response = await api.get('/books/storage-status');\n    return response.data;\n  },\n  cleanupStorage: async (force = false) => {\n    const response = await api.post(`/books/cleanup?force=${force}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","bookService","uploadBook","file","formData","FormData","append","response","post","headers","data","getBooks","get","deleteBook","id","delete","updateBook","put","generateCategories","bookId","generateKeywords","regenerateCategory","type","currentCategories","regenerateKeyword","index","currentKeywords","getStorageStatus","cleanupStorage","force"],"sources":["/Users/marcolp/AI/CURSOR projects/Lose/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5002/api'\n});\n\nexport const bookService = {\n  uploadBook: async (file) => {\n    const formData = new FormData();\n    formData.append('book', file);\n    const response = await api.post('/books/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n\n  getBooks: async () => {\n    const response = await api.get('/books');\n    return response.data;\n  },\n\n  deleteBook: async (id) => {\n    const response = await api.delete(`/books/${id}`);\n    return response.data;\n  },\n\n  updateBook: async (id, data) => {\n    const response = await api.put(`/books/${id}`, data);\n    return response.data;\n  },\n\n  generateCategories: async (bookId) => {\n    const response = await api.post(`/ai/categories/${bookId}`);\n    return response.data;\n  },\n\n  generateKeywords: async (bookId) => {\n    const response = await api.post(`/ai/keywords/${bookId}`);\n    return response.data;\n  },\n\n  regenerateCategory: async (bookId, type, currentCategories) => {\n    const response = await api.post(`/ai/categories/${bookId}/${type}`, { currentCategories });\n    return response.data;\n  },\n\n  regenerateKeyword: async (bookId, index, currentKeywords) => {\n    const response = await api.post(`/ai/keywords/${bookId}/${index}`, { currentKeywords });\n    return response.data;\n  },\n\n  getStorageStatus: async () => {\n    const response = await api.get('/books/storage-status');\n    return response.data;\n  },\n\n  cleanupStorage: async (force = false) => {\n    const response = await api.post(`/books/cleanup?force=${force}`);\n    return response.data;\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG;EACzBC,UAAU,EAAE,MAAOC,IAAI,IAAK;IAC1B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,MAAMI,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,eAAe,EAAEJ,QAAQ,EAAE;MACzDK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMJ,QAAQ,GAAG,MAAMT,GAAG,CAACc,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOL,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDG,UAAU,EAAE,MAAOC,EAAE,IAAK;IACxB,MAAMP,QAAQ,GAAG,MAAMT,GAAG,CAACiB,MAAM,CAAC,UAAUD,EAAE,EAAE,CAAC;IACjD,OAAOP,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDM,UAAU,EAAE,MAAAA,CAAOF,EAAE,EAAEJ,IAAI,KAAK;IAC9B,MAAMH,QAAQ,GAAG,MAAMT,GAAG,CAACmB,GAAG,CAAC,UAAUH,EAAE,EAAE,EAAEJ,IAAI,CAAC;IACpD,OAAOH,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDQ,kBAAkB,EAAE,MAAOC,MAAM,IAAK;IACpC,MAAMZ,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,kBAAkBW,MAAM,EAAE,CAAC;IAC3D,OAAOZ,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDU,gBAAgB,EAAE,MAAOD,MAAM,IAAK;IAClC,MAAMZ,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,gBAAgBW,MAAM,EAAE,CAAC;IACzD,OAAOZ,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDW,kBAAkB,EAAE,MAAAA,CAAOF,MAAM,EAAEG,IAAI,EAAEC,iBAAiB,KAAK;IAC7D,MAAMhB,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,kBAAkBW,MAAM,IAAIG,IAAI,EAAE,EAAE;MAAEC;IAAkB,CAAC,CAAC;IAC1F,OAAOhB,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDc,iBAAiB,EAAE,MAAAA,CAAOL,MAAM,EAAEM,KAAK,EAAEC,eAAe,KAAK;IAC3D,MAAMnB,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,gBAAgBW,MAAM,IAAIM,KAAK,EAAE,EAAE;MAAEC;IAAgB,CAAC,CAAC;IACvF,OAAOnB,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDiB,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,MAAMpB,QAAQ,GAAG,MAAMT,GAAG,CAACc,GAAG,CAAC,uBAAuB,CAAC;IACvD,OAAOL,QAAQ,CAACG,IAAI;EACtB,CAAC;EAEDkB,cAAc,EAAE,MAAAA,CAAOC,KAAK,GAAG,KAAK,KAAK;IACvC,MAAMtB,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,wBAAwBqB,KAAK,EAAE,CAAC;IAChE,OAAOtB,QAAQ,CAACG,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}